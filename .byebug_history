quit
logs
quit
logs.each { |log| log.each {|k,v| puts k }}
logs.each { |log| log.each {|k,v| puts v }}
logs.each { |log| log.each {|k,v|} puts v }
logs.each { |log| puts log.keys.first  }
logs.each { |log| puts log  }
logs.first.keys.first
logs.first.keys
logs.first
logs.each { |log| log.keys.first.to_s  }
logs.each { |log| log.keys.first  }
logs.each { |log| log.keys  }
logs.each { |log| log.  }
logs.each { |log| log.key  }
logs.each { |log| log  }
logs
quit
logs
quit
logs
quit
logs
url
quit
logs
quit
logs
c
logs
quit
logs
quit
most_page_views
quit
log
logs
quit
logs
type
quit
logs
quit
logs.each do |k,v| puts k.keys end
logs.each do |k,v| puts k.key end
logs.each do |k,v| puts k.key ed
logs.each do |k,v| puts k.key
logs.each do |k,v| puts v end
logs.each do |k,v| puts k end
logs
quit
count_views.sort_by(&:last).reverse.inject(Array.new) { |arr, v| arr << { v[0] => v[1] }}
count_views.sort_by(&:last).reverse
quit
count_views.sort_by(&:last).reverse.inject(Array.new) {|a, v| a << { v[0] => v[1] }  }
count_views.sort_by(&:last).reverse.inject(Array.new) {|a, v| a << { v[0] => v[1] };a  }
count_views.sort_by(&:last).reverse.inject(Array.new) {|a, v| a << { v[0] => v[1];a }  }
count_views.sort_by(&:last).reverse.inject(Array.new) {|a, v| a << { v[0] => v[1] }  }
count_views.sort_by(&:last).reverse.inject(Array.new) {|a, v| a << { v[0]: v[1]  }
count_views.sort_by(&:last).reverse.inject(Array.new) {|a, v| a << { v[0]: v[1] } }
count_views.sort_by(&:last).reverse.inject(Array.new) {|a, v| a << { v[0]: v[1] }; a }
count_views.sort_by(&:last).reverse.inject(Array.new) {|a, v| a << { v[0]: v[1]}; a }
count_views.sort_by(&:last).reverse.inject(Array.new) {|a, v| a << { v[0]: v[1]} }
count_views.sort_by(&:last).reverse.inject(Array.new) {|a, v| a << v }
count_views.sort_by(&:last).reverse.inject(Array.new) {|a, k, v| a << { k: v} }
count_views.sort_by(&:last).reverse
count_views.sort_by(&:last)
count_views.sort_by(&:last).to_h
count_views.sort_by(&:last)
count_views.sort_by(&:first)
count_views.sort_by(&:last)
count_views.sort_by(&:last).reverse
count_views.sort_by(&:last).to_h
count_views.sort_by(&:last)
count_views.sort_by(&:first)
count_views.sort_by(&:last)
count_views.sort_by { |ur, view_count|  view_count }.reverse
Hash[count_views.sort_by { |ur, view_count|  view_count }.reverse]
count_views.sort_by { |ur, view_count|  view_count }.reverse
count_views.sort_by { |ur, view_count|  view_count }.reverse.to_h
count_views.sort_by { |ur, view_count|  view_count }.reverse
count_views.sort_by { |ur, view_count|  view_count }
count_views
quit
count_views
c
subject
quit
visits.each_with_object({}) {|item, hash| hash[item[0]] = item[1].count}.sort_by {|u,v| v}.reverse.to_h
visits.each_with_object({}) {|item, hash| hash[item[0]] = item[1].count}.sort_by {|u,v| v}.reverse
visits.each_with_object({}) {|item, hash| hash[item[0]] = item[1].count}.sort_by {|u,v| v}.reverse.to_h
visits.each_with_object({}) {|item, hash| hash[item[0]] = item[1].count}.sort_by {|u,v| v}.to_h
visits.each_with_object({}) {|item, hash| hash[item[0]] = item[1].count}.sort_by {|u,v| v}.reverse
visits.each_with_object({}) {|item, hash| hash[item[0]] = item[1].count}.sort_by {|u,v| v}
visits.each_with_object({}) {|item, hash| hash[item[0]] = item[1].count}.sort
visits.each_with_object({}) {|item, hash| hash[item[0]] = item[1].count}
visits.each_with_object({}) {|item, hash| hash[item.key] = item.value.count}
visits.each_with_object({}) {|url, ip| ip.count}
visits.each_with_object({}) {|url, ip| url[ip] = ip.count}
visits.each_with_object({}) {|url, ip| url = ip.count}
visits.each_with_object({}) {|url, ip| ip.count}
visits.each_with_object {|url, ip| ip.count}
visits.map {|url, ip| ip.count}
visits
count_views.sort_by { |url, view_count| view_count}.reverse
count_views
count_views.sort_by { |url, view_count| view_count}.reverse
count_views.sort_by { |url, view_count| view_count}
count_views.sort_by { |url, view_count| view_count}.to_h
count_views.sort_by { |url, view_count| view_count}
count_views.sort_by { |url, view_count| view_count}.reverse
count_views
c
subject.visits
quit
@visits
visits
count_views
c
subject.most_page_views
subject
quit
count_views
count_views.sort_by { |url, view_count| view_count}.reverse
quit
@views.map {|k,v| visits[k] = v.count}
visits
@views.map {|k,v| visits[k] = v.count}
@views.map {|k,v| visit[k] = v.count}
@views
@visits
visits
view_count
views
@views
@views.inject(Hash.new) {|h,v| }
@views.inject(Hash.new) {|h,k,v| h}
@views.inject(Hash.new) {|h,k,v| v}
@views.inject(Hash.new) {|h,k,v| h[k] = v.count}
@views.map {|k,v| v.count}
@views.map {|k, v| v.count}
@views.each {|k, v| v.count}
@views.reduce {|k, v| v.count}
@views
    @views.inject(Hash.new) { |most_views, url, ip_addresses| most_views[url] = ip_addresses.count}
    views.inject(Hash.new) { |most_views, url, ip_addresses| most_views[url] = ip_addresses.count}
    views.inject(Hash.new) { |most_views, url, ip_addresses| most_views[url] = ip_addresses.count; most_views }
    views.inject(Hash.new) { |most_views, url, ip_addresses| most_views[url] = ip_addresses.count; most_views; }
    views.inject(Hash.new) { |most_views, url, ip_addresses| most_views[url] = ip_addresses.count; most_views }
most_views.sort_by{|k,v| v}.reverse
most_views.sort_by{|k,v| v}
most_views.sort{|k,v| v}
most_views
@views.map {|url, ip_addresses| most_views[url] = ip_addresses.count}
most_views = Hash.new
most_views
@views.map {|url, ip_addresses| ip_addresses}
@views.map {|url, ip_addresses| url}
@views.map {|url, ip_addresses| most_views[url] = ip_addresses.count}
@views
visits
quit
views
quit
ip_address
url
url, ip_address = *line.split(' ')
line.split(' ')
line.split(/ /)
line.split(\ \)
line.split(' ')
ip_address
url
url, ip_address = *line
line
quit
file_exists?(file_path)
File.file?(file_path)
quit
File.file?(path)
File.exist?(path)
path
c
subject
quit
subject
quit
subject
quit
path
subject
quit
require 'pathname'
File.file?(path)
path
c
quit
subject
